/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Master as PrismaMaster,
  MasterClass as PrismaMasterClass,
} from "@prisma/client";

export class MasterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MasterCountArgs, "select">): Promise<number> {
    return this.prisma.master.count(args);
  }

  async masters(args: Prisma.MasterFindManyArgs): Promise<PrismaMaster[]> {
    return this.prisma.master.findMany(args);
  }
  async master(
    args: Prisma.MasterFindUniqueArgs
  ): Promise<PrismaMaster | null> {
    return this.prisma.master.findUnique(args);
  }
  async createMaster(args: Prisma.MasterCreateArgs): Promise<PrismaMaster> {
    return this.prisma.master.create(args);
  }
  async updateMaster(args: Prisma.MasterUpdateArgs): Promise<PrismaMaster> {
    return this.prisma.master.update(args);
  }
  async deleteMaster(args: Prisma.MasterDeleteArgs): Promise<PrismaMaster> {
    return this.prisma.master.delete(args);
  }

  async findMasterClasses(
    parentId: string,
    args: Prisma.MasterClassFindManyArgs
  ): Promise<PrismaMasterClass[]> {
    return this.prisma.master
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .masterClasses(args);
  }
}
