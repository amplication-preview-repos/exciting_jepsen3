/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MasterService } from "../master.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MasterCreateInput } from "./MasterCreateInput";
import { Master } from "./Master";
import { MasterFindManyArgs } from "./MasterFindManyArgs";
import { MasterWhereUniqueInput } from "./MasterWhereUniqueInput";
import { MasterUpdateInput } from "./MasterUpdateInput";
import { MasterClassFindManyArgs } from "../../masterClass/base/MasterClassFindManyArgs";
import { MasterClass } from "../../masterClass/base/MasterClass";
import { MasterClassWhereUniqueInput } from "../../masterClass/base/MasterClassWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MasterControllerBase {
  constructor(
    protected readonly service: MasterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Master })
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMaster(@common.Body() data: MasterCreateInput): Promise<Master> {
    return await this.service.createMaster({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        specialization: true,
        role: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Master] })
  @ApiNestedQuery(MasterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async masters(@common.Req() request: Request): Promise<Master[]> {
    const args = plainToClass(MasterFindManyArgs, request.query);
    return this.service.masters({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        specialization: true,
        role: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Master })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async master(
    @common.Param() params: MasterWhereUniqueInput
  ): Promise<Master | null> {
    const result = await this.service.master({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        specialization: true,
        role: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Master })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMaster(
    @common.Param() params: MasterWhereUniqueInput,
    @common.Body() data: MasterUpdateInput
  ): Promise<Master | null> {
    try {
      return await this.service.updateMaster({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          specialization: true,
          role: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Master })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMaster(
    @common.Param() params: MasterWhereUniqueInput
  ): Promise<Master | null> {
    try {
      return await this.service.deleteMaster({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          specialization: true,
          role: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/masterClasses")
  @ApiNestedQuery(MasterClassFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MasterClass",
    action: "read",
    possession: "any",
  })
  async findMasterClasses(
    @common.Req() request: Request,
    @common.Param() params: MasterWhereUniqueInput
  ): Promise<MasterClass[]> {
    const query = plainToClass(MasterClassFindManyArgs, request.query);
    const results = await this.service.findMasterClasses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        date: true,

        master: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/masterClasses")
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "update",
    possession: "any",
  })
  async connectMasterClasses(
    @common.Param() params: MasterWhereUniqueInput,
    @common.Body() body: MasterClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      masterClasses: {
        connect: body,
      },
    };
    await this.service.updateMaster({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/masterClasses")
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "update",
    possession: "any",
  })
  async updateMasterClasses(
    @common.Param() params: MasterWhereUniqueInput,
    @common.Body() body: MasterClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      masterClasses: {
        set: body,
      },
    };
    await this.service.updateMaster({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/masterClasses")
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "update",
    possession: "any",
  })
  async disconnectMasterClasses(
    @common.Param() params: MasterWhereUniqueInput,
    @common.Body() body: MasterClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      masterClasses: {
        disconnect: body,
      },
    };
    await this.service.updateMaster({
      where: params,
      data,
      select: { id: true },
    });
  }
}
