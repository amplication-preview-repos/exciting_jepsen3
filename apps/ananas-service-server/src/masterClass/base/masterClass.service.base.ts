/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MasterClass as PrismaMasterClass,
  Appointment as PrismaAppointment,
  Master as PrismaMaster,
} from "@prisma/client";

export class MasterClassServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MasterClassCountArgs, "select">
  ): Promise<number> {
    return this.prisma.masterClass.count(args);
  }

  async masterClasses(
    args: Prisma.MasterClassFindManyArgs
  ): Promise<PrismaMasterClass[]> {
    return this.prisma.masterClass.findMany(args);
  }
  async masterClass(
    args: Prisma.MasterClassFindUniqueArgs
  ): Promise<PrismaMasterClass | null> {
    return this.prisma.masterClass.findUnique(args);
  }
  async createMasterClass(
    args: Prisma.MasterClassCreateArgs
  ): Promise<PrismaMasterClass> {
    return this.prisma.masterClass.create(args);
  }
  async updateMasterClass(
    args: Prisma.MasterClassUpdateArgs
  ): Promise<PrismaMasterClass> {
    return this.prisma.masterClass.update(args);
  }
  async deleteMasterClass(
    args: Prisma.MasterClassDeleteArgs
  ): Promise<PrismaMasterClass> {
    return this.prisma.masterClass.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.masterClass
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }

  async getMaster(parentId: string): Promise<PrismaMaster | null> {
    return this.prisma.masterClass
      .findUnique({
        where: { id: parentId },
      })
      .master();
  }
}
