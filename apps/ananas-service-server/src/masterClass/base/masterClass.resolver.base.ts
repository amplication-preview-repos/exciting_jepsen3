/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MasterClass } from "./MasterClass";
import { MasterClassCountArgs } from "./MasterClassCountArgs";
import { MasterClassFindManyArgs } from "./MasterClassFindManyArgs";
import { MasterClassFindUniqueArgs } from "./MasterClassFindUniqueArgs";
import { CreateMasterClassArgs } from "./CreateMasterClassArgs";
import { UpdateMasterClassArgs } from "./UpdateMasterClassArgs";
import { DeleteMasterClassArgs } from "./DeleteMasterClassArgs";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { Master } from "../../master/base/Master";
import { MasterClassService } from "../masterClass.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MasterClass)
export class MasterClassResolverBase {
  constructor(
    protected readonly service: MasterClassService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MasterClass",
    action: "read",
    possession: "any",
  })
  async _masterClassesMeta(
    @graphql.Args() args: MasterClassCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MasterClass])
  @nestAccessControl.UseRoles({
    resource: "MasterClass",
    action: "read",
    possession: "any",
  })
  async masterClasses(
    @graphql.Args() args: MasterClassFindManyArgs
  ): Promise<MasterClass[]> {
    return this.service.masterClasses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MasterClass, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MasterClass",
    action: "read",
    possession: "own",
  })
  async masterClass(
    @graphql.Args() args: MasterClassFindUniqueArgs
  ): Promise<MasterClass | null> {
    const result = await this.service.masterClass(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MasterClass)
  @nestAccessControl.UseRoles({
    resource: "MasterClass",
    action: "create",
    possession: "any",
  })
  async createMasterClass(
    @graphql.Args() args: CreateMasterClassArgs
  ): Promise<MasterClass> {
    return await this.service.createMasterClass({
      ...args,
      data: {
        ...args.data,

        master: args.data.master
          ? {
              connect: args.data.master,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MasterClass)
  @nestAccessControl.UseRoles({
    resource: "MasterClass",
    action: "update",
    possession: "any",
  })
  async updateMasterClass(
    @graphql.Args() args: UpdateMasterClassArgs
  ): Promise<MasterClass | null> {
    try {
      return await this.service.updateMasterClass({
        ...args,
        data: {
          ...args.data,

          master: args.data.master
            ? {
                connect: args.data.master,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MasterClass)
  @nestAccessControl.UseRoles({
    resource: "MasterClass",
    action: "delete",
    possession: "any",
  })
  async deleteMasterClass(
    @graphql.Args() args: DeleteMasterClassArgs
  ): Promise<MasterClass | null> {
    try {
      return await this.service.deleteMasterClass(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Appointment], { name: "appointments" })
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async findAppointments(
    @graphql.Parent() parent: MasterClass,
    @graphql.Args() args: AppointmentFindManyArgs
  ): Promise<Appointment[]> {
    const results = await this.service.findAppointments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Master, {
    nullable: true,
    name: "master",
  })
  @nestAccessControl.UseRoles({
    resource: "Master",
    action: "read",
    possession: "any",
  })
  async getMaster(
    @graphql.Parent() parent: MasterClass
  ): Promise<Master | null> {
    const result = await this.service.getMaster(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
